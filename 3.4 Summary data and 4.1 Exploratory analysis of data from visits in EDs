
# Importing the database, loading the packages and plotting the data in time series and boxplot plots #

library(ForecastTB)
library(ggplot2)
library(zoo)
library(forecast)
library(ggplot2)
library(lmtest)
library(urca)
library(stats)
library(nnfor)
library(forecastHybrid)
library(pastecs)
library(forecastML)
library(Rcpp)
library(modeltime.ensemble)
library(tidymodels)
library(modeltime)
library(timetk)   
library(lubridate)
library(tidyverse)
library(modeltime.h2o)
library(yardstick)
library(reshape)
library(ggplot2)
library(timetk)
library(plotly)

# after loading the packages, you must import the data into R, keeping the original excel filename "atends_temperature_calendar" #

## attach to know the variables
attach(atends_temperature_calendar)

# Plotting the data from the twenty emergencies on time series graphs #
data_tbl <- atends_temperature_calendar %>%
  select(id, Date, attendences) %>%
  set_names(c("id", "date", "value"))

data_tbl

data_tbl %>%
  group_by(id) %>%
  plot_time_series(
    date, value, .interactive = F, .facet_ncol = 5
  )

# To plot and view the time series chart (Figure 2) of the article #

data_tbl %>%
  plot_time_series(Date, attendences, .color_var = id, .interactive = F, .smooth = F, .y_lab ="attendences by hospitals",  .x_lab = "Daily data", .title = "") 

# Interactive graph. This toggles plots from plotly (interactive) to ggplot (static) .interactive = F #
data_tbl %>%
  plot_time_series(Date, attendences, .color_var = id, .smooth = F, .y_lab ="attendences by hospitals", .x_lab = "Daily data", .title = "")

p <- ggplot(data = data_tbl, aes(x = Date, y = attendences, color=id)) +
  geom_line() + labs(x = "Daily data", y = "attendences by hospitals")
p + scale_fill_brewer(palette = "Set1")


# Plotting the twenty emergencies data in boxplots charts (Figure 1) #

ggplot(data = data_tbl, aes(x = id, y = attendences, fill=id)) +
  geom_boxplot() + labs(fill="time series", x = "Daily data", y = "attendences by hospitals")                

# The seasonality evaluation (Figure 3) of the data showing the data behavior using the plot_seasonal_diagnostics() function. #

data_tbl <- atends_temperature_calendar %>%
  select(id, Date, attendences) %>%
  set_names(c("id", "date", "value"))
data_tbl

## This worked for me with a windows 10 laptop in Portuguese, where I wanted i.e. lubridate to return dates in English:
Sys.setlocale("LC_TIME", "English")


# View the seasonality box plot for the twenty EDs (All patient arrivals from the twenty emergencies in a single boxplot) #

data_tbl %>%
  plot_seasonal_diagnostics(
    date, value, 
    .feature_set = c("wday.lbl", "month.lbl"),
    .interactive = FALSE, .title = ""
  )


# Visualize seasonality box plot test in id time series -----
data_tbl %>% filter(id == "antoniushove") %>%
  plot_seasonal_diagnostics(
    date, value, 
    .feature_set = c("wday.lbl", "month.lbl"),
    .interactive = FALSE, .title = "ANTONIUSHOVE"
  )






data_tbl %>%
  plot_seasonal_diagnostics(
    date, value,
    .feature_set = c("week", "quarter"),
    .interactive = FALSE
  )

# Visualize seasonality group
data_tbl %>%
  group_by(id) %>%
  plot_seasonal_diagnostics(date, value, .interactive = FALSE)


## Estatisticas descritivas das 20 s√©ries temporais
library(pastecs)
attach(data_vitsits_global_estatisticas_descritivas)
summary(data_vitsits_global_estatisticas_descritivas)
stat.desc(data_vitsits_global_estatisticas_descritivas)
